### YamlMime:UniversalReference
items:
  - uid: adaptivecards.TextRun
    name: TextRun
    fullName: TextRun
    children:
      - adaptivecards.TextRun.applyStylesTo
      - adaptivecards.TextRun.ariaHidden
      - adaptivecards.TextRun.asString
      - adaptivecards.TextRun.color
      - adaptivecards.TextRun.colorProperty
      - adaptivecards.TextRun.customCssSelector
      - adaptivecards.TextRun.effectiveColor
      - adaptivecards.TextRun.fontType
      - adaptivecards.TextRun.fontTypeProperty
      - adaptivecards.TextRun.getActionAt
      - adaptivecards.TextRun.getActionById
      - adaptivecards.TextRun.getActionCount
      - adaptivecards.TextRun.getAllInputs
      - adaptivecards.TextRun.getCustomProperty
      - adaptivecards.TextRun.getEffectivePadding
      - adaptivecards.TextRun.getEffectiveStyle
      - adaptivecards.TextRun.getEffectiveStyleDefinition
      - adaptivecards.TextRun.getElementById
      - adaptivecards.TextRun.getForbiddenActionTypes
      - adaptivecards.TextRun.getImmediateSurroundingPadding
      - adaptivecards.TextRun.getJsonTypeName
      - adaptivecards.TextRun.getParentContainer
      - adaptivecards.TextRun.getResourceInformation
      - adaptivecards.TextRun.getRootElement
      - adaptivecards.TextRun.getRootObject
      - adaptivecards.TextRun.getSchema
      - adaptivecards.TextRun.hasAllDefaultValues
      - adaptivecards.TextRun.hasDefaultValue
      - adaptivecards.TextRun.hasVisibleSeparator
      - adaptivecards.TextRun.height
      - adaptivecards.TextRun.heightProperty
      - adaptivecards.TextRun.highlight
      - adaptivecards.TextRun.highlightProperty
      - adaptivecards.TextRun.horizontalAlignment
      - adaptivecards.TextRun.horizontalAlignmentProperty
      - adaptivecards.TextRun.hostConfig
      - adaptivecards.TextRun.id
      - adaptivecards.TextRun.idProperty
      - adaptivecards.TextRun.index
      - adaptivecards.TextRun.indexOf
      - adaptivecards.TextRun.init
      - adaptivecards.TextRun.internalValidateProperties
      - adaptivecards.TextRun.isAtTheVeryBottom
      - adaptivecards.TextRun.isAtTheVeryLeft
      - adaptivecards.TextRun.isAtTheVeryRight
      - adaptivecards.TextRun.isAtTheVeryTop
      - adaptivecards.TextRun.isBleeding
      - adaptivecards.TextRun.isBleedingAtBottom
      - adaptivecards.TextRun.isBleedingAtTop
      - adaptivecards.TextRun.isBottomElement
      - adaptivecards.TextRun.isDesignMode
      - adaptivecards.TextRun.isFirstElement
      - adaptivecards.TextRun.isHiddenDueToOverflow
      - adaptivecards.TextRun.isInline
      - adaptivecards.TextRun.isInteractive
      - adaptivecards.TextRun.isLastElement
      - adaptivecards.TextRun.isLeftMostElement
      - adaptivecards.TextRun.isRightMostElement
      - adaptivecards.TextRun.isStandalone
      - adaptivecards.TextRun.isSubtle
      - adaptivecards.TextRun.isSubtleProperty
      - adaptivecards.TextRun.isTopElement
      - adaptivecards.TextRun.isVisible
      - adaptivecards.TextRun.isVisibleProperty
      - adaptivecards.TextRun.italic
      - adaptivecards.TextRun.italicProperty
      - adaptivecards.TextRun.lang
      - adaptivecards.TextRun.langProperty
      - adaptivecards.TextRun.maxVersion
      - adaptivecards.TextRun.onPreProcessPropertyValue
      - adaptivecards.TextRun.onRegisterCustomProperties
      - adaptivecards.TextRun.parent
      - adaptivecards.TextRun.parse
      - adaptivecards.TextRun.preProcessPropertyValue
      - adaptivecards.TextRun.remove
      - adaptivecards.TextRun.render
      - adaptivecards.TextRun.renderedElement
      - adaptivecards.TextRun.requires
      - adaptivecards.TextRun.requiresProperty
      - adaptivecards.TextRun.resetDefaultValues
      - adaptivecards.TextRun.selectAction
      - adaptivecards.TextRun.selectActionProperty
      - adaptivecards.TextRun.separator
      - adaptivecards.TextRun.separatorElement
      - adaptivecards.TextRun.separatorProperty
      - adaptivecards.TextRun.setCustomProperty
      - adaptivecards.TextRun.setParent
      - adaptivecards.TextRun.setShouldFallback
      - adaptivecards.TextRun.shouldFallback
      - adaptivecards.TextRun.size
      - adaptivecards.TextRun.sizeProperty
      - adaptivecards.TextRun.spacing
      - adaptivecards.TextRun.spacingProperty
      - adaptivecards.TextRun.strikethrough
      - adaptivecards.TextRun.strikethroughProperty
      - adaptivecards.TextRun.text
      - adaptivecards.TextRun.textProperty
      - adaptivecards.TextRun.constructor
      - adaptivecards.TextRun.toJSON
      - adaptivecards.TextRun.typeNameProperty
      - adaptivecards.TextRun.underline
      - adaptivecards.TextRun.underlineProperty
      - adaptivecards.TextRun.updateLayout
      - adaptivecards.TextRun.validateProperties
      - adaptivecards.TextRun.weight
      - adaptivecards.TextRun.weightProperty
    langs:
      - typeScript
    type: class
    summary: ''
    extends:
      name: adaptivecards.BaseTextBlock
    package: adaptivecards
  - uid: adaptivecards.TextRun.applyStylesTo
    name: applyStylesTo(HTMLElement)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function applyStylesTo(targetElement: HTMLElement)'
      parameters:
        - id: targetElement
          type:
            - HTMLElement
          description: ''
    package: adaptivecards
  - uid: adaptivecards.TextRun.ariaHidden
    name: ariaHidden
    fullName: ariaHidden
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'ariaHidden: boolean'
      return:
        type:
          - boolean
        description: ''
    package: adaptivecards
  - uid: adaptivecards.TextRun.asString
    name: asString()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function asString()
      parameters: []
      return:
        type:
          - string | undefined
        description: ''
    package: adaptivecards
  - uid: adaptivecards.TextRun.color
    name: color
    fullName: color
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'color: TextColor'
      return:
        type:
          - adaptivecards.TextColor
        description: ''
    package: adaptivecards
  - uid: adaptivecards.TextRun.colorProperty
    name: colorProperty
    fullName: colorProperty
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static colorProperty: EnumProperty<TextColor>'
      return:
        type:
          - adaptivecards.EnumProperty<adaptivecards.TextColor>
        description: ''
    package: adaptivecards
  - uid: adaptivecards.TextRun.customCssSelector
    name: customCssSelector
    fullName: customCssSelector
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    optional: true
    syntax:
      content: 'customCssSelector?: string'
      return:
        type:
          - string
        description: ''
    package: adaptivecards
  - uid: adaptivecards.TextRun.effectiveColor
    name: effectiveColor
    fullName: effectiveColor
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: TextColor effectiveColor
      return:
        type:
          - adaptivecards.TextColor
        description: ''
    package: adaptivecards
  - uid: adaptivecards.TextRun.fontType
    name: fontType
    fullName: fontType
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    optional: true
    syntax:
      content: 'fontType?: FontType'
      return:
        type:
          - adaptivecards.FontType
        description: ''
    package: adaptivecards
  - uid: adaptivecards.TextRun.fontTypeProperty
    name: fontTypeProperty
    fullName: fontTypeProperty
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static fontTypeProperty: EnumProperty<FontType>'
      return:
        type:
          - adaptivecards.EnumProperty<adaptivecards.FontType>
        description: ''
    package: adaptivecards
  - uid: adaptivecards.TextRun.getActionAt
    name: getActionAt(number)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getActionAt(index: number)'
      parameters:
        - id: index
          type:
            - number
          description: ''
      return:
        type:
          - adaptivecards.Action | undefined
        description: ''
    package: adaptivecards
  - uid: adaptivecards.TextRun.getActionById
    name: getActionById(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getActionById(id: string)'
      parameters:
        - id: id
          type:
            - string
          description: ''
      return:
        type:
          - adaptivecards.Action | undefined
        description: ''
    package: adaptivecards
  - uid: adaptivecards.TextRun.getActionCount
    name: getActionCount()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function getActionCount()
      parameters: []
      return:
        type:
          - number
        description: ''
    package: adaptivecards
  - uid: adaptivecards.TextRun.getAllInputs
    name: getAllInputs(boolean)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getAllInputs(processActions?: boolean)'
      parameters:
        - id: processActions
          type:
            - boolean
          description: ''
          optional: true
      return:
        type:
          - 'adaptivecards.Input[]'
        description: ''
    package: adaptivecards
  - uid: adaptivecards.TextRun.getCustomProperty
    name: getCustomProperty(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getCustomProperty(name: string)'
      parameters:
        - id: name
          type:
            - string
          description: ''
      return:
        type:
          - any
        description: ''
    package: adaptivecards
  - uid: adaptivecards.TextRun.getEffectivePadding
    name: getEffectivePadding()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function getEffectivePadding()
      parameters: []
      return:
        type:
          - adaptivecards.PaddingDefinition
        description: ''
    package: adaptivecards
  - uid: adaptivecards.TextRun.getEffectiveStyle
    name: getEffectiveStyle()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function getEffectiveStyle()
      parameters: []
      return:
        type:
          - string
        description: ''
    package: adaptivecards
  - uid: adaptivecards.TextRun.getEffectiveStyleDefinition
    name: getEffectiveStyleDefinition()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function getEffectiveStyleDefinition()
      parameters: []
      return:
        type:
          - adaptivecards.ContainerStyleDefinition
        description: ''
    package: adaptivecards
  - uid: adaptivecards.TextRun.getElementById
    name: getElementById(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function getElementById(id: string)'
      parameters:
        - id: id
          type:
            - string
          description: ''
      return:
        type:
          - adaptivecards.CardElement | undefined
        description: ''
    package: adaptivecards
  - uid: adaptivecards.TextRun.getForbiddenActionTypes
    name: getForbiddenActionTypes()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function getForbiddenActionTypes()
      parameters: []
      return:
        type:
          - 'adaptivecards.ActionType[]'
        description: ''
    package: adaptivecards
  - uid: adaptivecards.TextRun.getImmediateSurroundingPadding
    name: >-
      getImmediateSurroundingPadding(PaddingDefinition, boolean, boolean,
      boolean, boolean)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function getImmediateSurroundingPadding(result: PaddingDefinition,
        processTop?: boolean, processRight?: boolean, processBottom?: boolean,
        processLeft?: boolean)
      parameters:
        - id: result
          type:
            - adaptivecards.PaddingDefinition
          description: ''
        - id: processTop
          type:
            - boolean
          description: ''
          optional: true
        - id: processRight
          type:
            - boolean
          description: ''
          optional: true
        - id: processBottom
          type:
            - boolean
          description: ''
          optional: true
        - id: processLeft
          type:
            - boolean
          description: ''
          optional: true
    package: adaptivecards
  - uid: adaptivecards.TextRun.getJsonTypeName
    name: getJsonTypeName()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function getJsonTypeName()
      parameters: []
      return:
        type:
          - string
        description: ''
    package: adaptivecards
  - uid: adaptivecards.TextRun.getParentContainer
    name: getParentContainer()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function getParentContainer()
      parameters: []
      return:
        type:
          - adaptivecards.Container | undefined
        description: ''
    package: adaptivecards
  - uid: adaptivecards.TextRun.getResourceInformation
    name: getResourceInformation()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function getResourceInformation()
      parameters: []
      return:
        type:
          - 'adaptivecards.IResourceInformation[]'
        description: ''
    package: adaptivecards
  - uid: adaptivecards.TextRun.getRootElement
    name: getRootElement()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function getRootElement()
      parameters: []
      return:
        type:
          - adaptivecards.CardElement
        description: ''
    package: adaptivecards
  - uid: adaptivecards.TextRun.getRootObject
    name: getRootObject()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function getRootObject()
      parameters: []
      return:
        type:
          - adaptivecards.CardObject
        description: ''
    package: adaptivecards
  - uid: adaptivecards.TextRun.getSchema
    name: getSchema()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function getSchema()
      parameters: []
      return:
        type:
          - adaptivecards.SerializableObjectSchema
        description: ''
    package: adaptivecards
  - uid: adaptivecards.TextRun.hasAllDefaultValues
    name: hasAllDefaultValues()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function hasAllDefaultValues()
      parameters: []
      return:
        type:
          - boolean
        description: ''
    package: adaptivecards
  - uid: adaptivecards.TextRun.hasDefaultValue
    name: hasDefaultValue(PropertyDefinition)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function hasDefaultValue(property: PropertyDefinition)'
      parameters:
        - id: property
          type:
            - adaptivecards.PropertyDefinition
          description: ''
      return:
        type:
          - boolean
        description: ''
    package: adaptivecards
  - uid: adaptivecards.TextRun.hasVisibleSeparator
    name: hasVisibleSeparator
    fullName: hasVisibleSeparator
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: boolean hasVisibleSeparator
      return:
        type:
          - boolean
        description: ''
    package: adaptivecards
  - uid: adaptivecards.TextRun.height
    name: height
    fullName: height
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'height: CardElementHeight'
      return:
        type:
          - adaptivecards.CardElementHeight
        description: ''
    package: adaptivecards
  - uid: adaptivecards.TextRun.heightProperty
    name: heightProperty
    fullName: heightProperty
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static heightProperty: ValueSetProperty'
      return:
        type:
          - adaptivecards.ValueSetProperty
        description: ''
    package: adaptivecards
  - uid: adaptivecards.TextRun.highlight
    name: highlight
    fullName: highlight
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'highlight: boolean'
      return:
        type:
          - boolean
        description: ''
    package: adaptivecards
  - uid: adaptivecards.TextRun.highlightProperty
    name: highlightProperty
    fullName: highlightProperty
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static highlightProperty: BoolProperty'
      return:
        type:
          - adaptivecards.BoolProperty
        description: ''
    package: adaptivecards
  - uid: adaptivecards.TextRun.horizontalAlignment
    name: horizontalAlignment
    fullName: horizontalAlignment
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'horizontalAlignment: HorizontalAlignment'
      return:
        type:
          - adaptivecards.HorizontalAlignment
        description: ''
    package: adaptivecards
  - uid: adaptivecards.TextRun.horizontalAlignmentProperty
    name: horizontalAlignmentProperty
    fullName: horizontalAlignmentProperty
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static horizontalAlignmentProperty: EnumProperty<HorizontalAlignment>'
      return:
        type:
          - adaptivecards.EnumProperty<adaptivecards.HorizontalAlignment>
        description: ''
    package: adaptivecards
  - uid: adaptivecards.TextRun.hostConfig
    name: hostConfig
    fullName: hostConfig
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: HostConfig hostConfig
      return:
        type:
          - adaptivecards.HostConfig
        description: ''
    package: adaptivecards
  - uid: adaptivecards.TextRun.id
    name: id
    fullName: id
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    optional: true
    syntax:
      content: 'id?: string'
      return:
        type:
          - string
        description: ''
    package: adaptivecards
  - uid: adaptivecards.TextRun.idProperty
    name: idProperty
    fullName: idProperty
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static idProperty: StringProperty'
      return:
        type:
          - adaptivecards.StringProperty
        description: ''
    package: adaptivecards
  - uid: adaptivecards.TextRun.index
    name: index
    fullName: index
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: number index
      return:
        type:
          - number
        description: ''
    package: adaptivecards
  - uid: adaptivecards.TextRun.indexOf
    name: indexOf(CardElement)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function indexOf(cardElement: CardElement)'
      parameters:
        - id: cardElement
          type:
            - adaptivecards.CardElement
          description: ''
      return:
        type:
          - number
        description: ''
    package: adaptivecards
  - uid: adaptivecards.TextRun.init
    name: init(BaseTextDefinition)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function init(textDefinition: BaseTextDefinition)'
      parameters:
        - id: textDefinition
          type:
            - adaptivecards.BaseTextDefinition
          description: ''
    package: adaptivecards
  - uid: adaptivecards.TextRun.internalValidateProperties
    name: internalValidateProperties(ValidationResults)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function internalValidateProperties(context: ValidationResults)'
      parameters:
        - id: context
          type:
            - adaptivecards.ValidationResults
          description: ''
    package: adaptivecards
  - uid: adaptivecards.TextRun.isAtTheVeryBottom
    name: isAtTheVeryBottom()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function isAtTheVeryBottom()
      parameters: []
      return:
        type:
          - boolean
        description: ''
    package: adaptivecards
  - uid: adaptivecards.TextRun.isAtTheVeryLeft
    name: isAtTheVeryLeft()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function isAtTheVeryLeft()
      parameters: []
      return:
        type:
          - boolean
        description: ''
    package: adaptivecards
  - uid: adaptivecards.TextRun.isAtTheVeryRight
    name: isAtTheVeryRight()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function isAtTheVeryRight()
      parameters: []
      return:
        type:
          - boolean
        description: ''
    package: adaptivecards
  - uid: adaptivecards.TextRun.isAtTheVeryTop
    name: isAtTheVeryTop()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function isAtTheVeryTop()
      parameters: []
      return:
        type:
          - boolean
        description: ''
    package: adaptivecards
  - uid: adaptivecards.TextRun.isBleeding
    name: isBleeding()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function isBleeding()
      parameters: []
      return:
        type:
          - boolean
        description: ''
    package: adaptivecards
  - uid: adaptivecards.TextRun.isBleedingAtBottom
    name: isBleedingAtBottom()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function isBleedingAtBottom()
      parameters: []
      return:
        type:
          - boolean
        description: ''
    package: adaptivecards
  - uid: adaptivecards.TextRun.isBleedingAtTop
    name: isBleedingAtTop()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function isBleedingAtTop()
      parameters: []
      return:
        type:
          - boolean
        description: ''
    package: adaptivecards
  - uid: adaptivecards.TextRun.isBottomElement
    name: isBottomElement(CardElement)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function isBottomElement(element: CardElement)'
      parameters:
        - id: element
          type:
            - adaptivecards.CardElement
          description: ''
      return:
        type:
          - boolean
        description: ''
    package: adaptivecards
  - uid: adaptivecards.TextRun.isDesignMode
    name: isDesignMode()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function isDesignMode()
      parameters: []
      return:
        type:
          - boolean
        description: ''
    package: adaptivecards
  - uid: adaptivecards.TextRun.isFirstElement
    name: isFirstElement(CardElement)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function isFirstElement(element: CardElement)'
      parameters:
        - id: element
          type:
            - adaptivecards.CardElement
          description: ''
      return:
        type:
          - boolean
        description: ''
    package: adaptivecards
  - uid: adaptivecards.TextRun.isHiddenDueToOverflow
    name: isHiddenDueToOverflow()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function isHiddenDueToOverflow()
      parameters: []
      return:
        type:
          - boolean
        description: ''
    package: adaptivecards
  - uid: adaptivecards.TextRun.isInline
    name: isInline
    fullName: isInline
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: boolean isInline
      return:
        type:
          - boolean
        description: ''
    package: adaptivecards
  - uid: adaptivecards.TextRun.isInteractive
    name: isInteractive
    fullName: isInteractive
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: boolean isInteractive
      return:
        type:
          - boolean
        description: ''
    package: adaptivecards
  - uid: adaptivecards.TextRun.isLastElement
    name: isLastElement(CardElement)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function isLastElement(element: CardElement)'
      parameters:
        - id: element
          type:
            - adaptivecards.CardElement
          description: ''
      return:
        type:
          - boolean
        description: ''
    package: adaptivecards
  - uid: adaptivecards.TextRun.isLeftMostElement
    name: isLeftMostElement(CardElement)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function isLeftMostElement(element: CardElement)'
      parameters:
        - id: element
          type:
            - adaptivecards.CardElement
          description: ''
      return:
        type:
          - boolean
        description: ''
    package: adaptivecards
  - uid: adaptivecards.TextRun.isRightMostElement
    name: isRightMostElement(CardElement)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function isRightMostElement(element: CardElement)'
      parameters:
        - id: element
          type:
            - adaptivecards.CardElement
          description: ''
      return:
        type:
          - boolean
        description: ''
    package: adaptivecards
  - uid: adaptivecards.TextRun.isStandalone
    name: isStandalone
    fullName: isStandalone
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: boolean isStandalone
      return:
        type:
          - boolean
        description: ''
    package: adaptivecards
  - uid: adaptivecards.TextRun.isSubtle
    name: isSubtle
    fullName: isSubtle
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'isSubtle: boolean'
      return:
        type:
          - boolean
        description: ''
    package: adaptivecards
  - uid: adaptivecards.TextRun.isSubtleProperty
    name: isSubtleProperty
    fullName: isSubtleProperty
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static isSubtleProperty: BoolProperty'
      return:
        type:
          - adaptivecards.BoolProperty
        description: ''
    package: adaptivecards
  - uid: adaptivecards.TextRun.isTopElement
    name: isTopElement(CardElement)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function isTopElement(element: CardElement)'
      parameters:
        - id: element
          type:
            - adaptivecards.CardElement
          description: ''
      return:
        type:
          - boolean
        description: ''
    package: adaptivecards
  - uid: adaptivecards.TextRun.isVisible
    name: isVisible
    fullName: isVisible
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: boolean isVisible
      return:
        type:
          - boolean
        description: ''
    package: adaptivecards
  - uid: adaptivecards.TextRun.isVisibleProperty
    name: isVisibleProperty
    fullName: isVisibleProperty
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static isVisibleProperty: BoolProperty'
      return:
        type:
          - adaptivecards.BoolProperty
        description: ''
    package: adaptivecards
  - uid: adaptivecards.TextRun.italic
    name: italic
    fullName: italic
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'italic: boolean'
      return:
        type:
          - boolean
        description: ''
    package: adaptivecards
  - uid: adaptivecards.TextRun.italicProperty
    name: italicProperty
    fullName: italicProperty
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static italicProperty: BoolProperty'
      return:
        type:
          - adaptivecards.BoolProperty
        description: ''
    package: adaptivecards
  - uid: adaptivecards.TextRun.lang
    name: lang
    fullName: lang
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: string | undefined lang
      return:
        type:
          - string | undefined
        description: ''
    package: adaptivecards
  - uid: adaptivecards.TextRun.langProperty
    name: langProperty
    fullName: langProperty
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static langProperty: StringProperty'
      return:
        type:
          - adaptivecards.StringProperty
        description: ''
    package: adaptivecards
  - uid: adaptivecards.TextRun.maxVersion
    name: maxVersion
    fullName: maxVersion
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'maxVersion: Version'
      return:
        type:
          - adaptivecards.Version
        description: ''
    package: adaptivecards
  - uid: adaptivecards.TextRun.onPreProcessPropertyValue
    name: onPreProcessPropertyValue
    fullName: onPreProcessPropertyValue
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    optional: true
    syntax:
      content: >-
        onPreProcessPropertyValue?: (sender: CardObject, property:
        PropertyDefinition, value: any) => any
      return:
        type:
          - >-
            (sender: CardObject, property: PropertyDefinition, value: any) =>
            any
        description: ''
    package: adaptivecards
  - uid: adaptivecards.TextRun.onRegisterCustomProperties
    name: onRegisterCustomProperties
    fullName: onRegisterCustomProperties
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    optional: true
    syntax:
      content: >-
        static onRegisterCustomProperties?: (sender: SerializableObject, schema:
        SerializableObjectSchema) => void
      return:
        type:
          - >-
            (sender: SerializableObject, schema: SerializableObjectSchema) =>
            void
        description: ''
    package: adaptivecards
  - uid: adaptivecards.TextRun.parent
    name: parent
    fullName: parent
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: CardElement | undefined parent
      return:
        type:
          - adaptivecards.CardElement | undefined
        description: ''
    package: adaptivecards
  - uid: adaptivecards.TextRun.parse
    name: 'parse(any, SerializationContext)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function parse(source: any, context?: SerializationContext)'
      parameters:
        - id: source
          type:
            - any
          description: ''
        - id: context
          type:
            - adaptivecards.SerializationContext
          description: ''
          optional: true
    package: adaptivecards
  - uid: adaptivecards.TextRun.preProcessPropertyValue
    name: 'preProcessPropertyValue(PropertyDefinition, any)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: >-
        function preProcessPropertyValue(property: PropertyDefinition,
        propertyValue?: any)
      parameters:
        - id: property
          type:
            - adaptivecards.PropertyDefinition
          description: ''
        - id: propertyValue
          type:
            - any
          description: ''
          optional: true
      return:
        type:
          - any
        description: ''
    package: adaptivecards
  - uid: adaptivecards.TextRun.remove
    name: remove()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function remove()
      parameters: []
      return:
        type:
          - boolean
        description: ''
    package: adaptivecards
  - uid: adaptivecards.TextRun.render
    name: render()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function render()
      parameters: []
      return:
        type:
          - HTMLElement | undefined
        description: ''
    package: adaptivecards
  - uid: adaptivecards.TextRun.renderedElement
    name: renderedElement
    fullName: renderedElement
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: HTMLElement | undefined renderedElement
      return:
        type:
          - HTMLElement | undefined
        description: ''
    package: adaptivecards
  - uid: adaptivecards.TextRun.requires
    name: requires
    fullName: requires
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: HostCapabilities requires
      return:
        type:
          - adaptivecards.HostCapabilities
        description: ''
    package: adaptivecards
  - uid: adaptivecards.TextRun.requiresProperty
    name: requiresProperty
    fullName: requiresProperty
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static requiresProperty: SerializableObjectProperty'
      return:
        type:
          - adaptivecards.SerializableObjectProperty
        description: ''
    package: adaptivecards
  - uid: adaptivecards.TextRun.resetDefaultValues
    name: resetDefaultValues()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function resetDefaultValues()
      parameters: []
    package: adaptivecards
  - uid: adaptivecards.TextRun.selectAction
    name: selectAction
    fullName: selectAction
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    optional: true
    syntax:
      content: 'selectAction?: Action'
      return:
        type:
          - adaptivecards.Action
        description: ''
    package: adaptivecards
  - uid: adaptivecards.TextRun.selectActionProperty
    name: selectActionProperty
    fullName: selectActionProperty
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static selectActionProperty: ActionProperty'
      return:
        type:
          - adaptivecards.ActionProperty
        description: ''
    package: adaptivecards
  - uid: adaptivecards.TextRun.separator
    name: separator
    fullName: separator
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'separator: boolean'
      return:
        type:
          - boolean
        description: ''
    package: adaptivecards
  - uid: adaptivecards.TextRun.separatorElement
    name: separatorElement
    fullName: separatorElement
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: HTMLElement | undefined separatorElement
      return:
        type:
          - HTMLElement | undefined
        description: ''
    package: adaptivecards
  - uid: adaptivecards.TextRun.separatorProperty
    name: separatorProperty
    fullName: separatorProperty
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static separatorProperty: BoolProperty'
      return:
        type:
          - adaptivecards.BoolProperty
        description: ''
    package: adaptivecards
  - uid: adaptivecards.TextRun.setCustomProperty
    name: 'setCustomProperty(string, any)'
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function setCustomProperty(name: string, value: any)'
      parameters:
        - id: name
          type:
            - string
          description: ''
        - id: value
          type:
            - any
          description: ''
    package: adaptivecards
  - uid: adaptivecards.TextRun.setParent
    name: setParent(CardObject | undefined)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function setParent(value: CardObject | undefined)'
      parameters:
        - id: value
          type:
            - adaptivecards.CardObject | undefined
          description: ''
    package: adaptivecards
  - uid: adaptivecards.TextRun.setShouldFallback
    name: setShouldFallback(boolean)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function setShouldFallback(value: boolean)'
      parameters:
        - id: value
          type:
            - boolean
          description: ''
    package: adaptivecards
  - uid: adaptivecards.TextRun.shouldFallback
    name: shouldFallback()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function shouldFallback()
      parameters: []
      return:
        type:
          - boolean
        description: ''
    package: adaptivecards
  - uid: adaptivecards.TextRun.size
    name: size
    fullName: size
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'size: TextSize'
      return:
        type:
          - adaptivecards.TextSize
        description: ''
    package: adaptivecards
  - uid: adaptivecards.TextRun.sizeProperty
    name: sizeProperty
    fullName: sizeProperty
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static sizeProperty: EnumProperty<TextSize>'
      return:
        type:
          - adaptivecards.EnumProperty<adaptivecards.TextSize>
        description: ''
    package: adaptivecards
  - uid: adaptivecards.TextRun.spacing
    name: spacing
    fullName: spacing
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'spacing: Spacing'
      return:
        type:
          - adaptivecards.Spacing
        description: ''
    package: adaptivecards
  - uid: adaptivecards.TextRun.spacingProperty
    name: spacingProperty
    fullName: spacingProperty
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static spacingProperty: EnumProperty<Spacing>'
      return:
        type:
          - adaptivecards.EnumProperty<adaptivecards.Spacing>
        description: ''
    package: adaptivecards
  - uid: adaptivecards.TextRun.strikethrough
    name: strikethrough
    fullName: strikethrough
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'strikethrough: boolean'
      return:
        type:
          - boolean
        description: ''
    package: adaptivecards
  - uid: adaptivecards.TextRun.strikethroughProperty
    name: strikethroughProperty
    fullName: strikethroughProperty
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static strikethroughProperty: BoolProperty'
      return:
        type:
          - adaptivecards.BoolProperty
        description: ''
    package: adaptivecards
  - uid: adaptivecards.TextRun.text
    name: text
    fullName: text
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: string | undefined text
      return:
        type:
          - string | undefined
        description: ''
    package: adaptivecards
  - uid: adaptivecards.TextRun.textProperty
    name: textProperty
    fullName: textProperty
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static textProperty: StringProperty'
      return:
        type:
          - adaptivecards.StringProperty
        description: ''
    package: adaptivecards
  - uid: adaptivecards.TextRun.constructor
    name: TextRun(string)
    children: []
    type: constructor
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'new TextRun(text?: string)'
      parameters:
        - id: text
          type:
            - string
          description: ''
          optional: true
    package: adaptivecards
  - uid: adaptivecards.TextRun.toJSON
    name: toJSON(BaseSerializationContext)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function toJSON(context?: BaseSerializationContext)'
      parameters:
        - id: context
          type:
            - adaptivecards.BaseSerializationContext
          description: ''
          optional: true
      return:
        type:
          - adaptivecards.PropertyBag | undefined
        description: ''
    package: adaptivecards
  - uid: adaptivecards.TextRun.typeNameProperty
    name: typeNameProperty
    fullName: typeNameProperty
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static typeNameProperty: StringProperty'
      return:
        type:
          - adaptivecards.StringProperty
        description: ''
    package: adaptivecards
  - uid: adaptivecards.TextRun.underline
    name: underline
    fullName: underline
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'underline: boolean'
      return:
        type:
          - boolean
        description: ''
    package: adaptivecards
  - uid: adaptivecards.TextRun.underlineProperty
    name: underlineProperty
    fullName: underlineProperty
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static underlineProperty: BoolProperty'
      return:
        type:
          - adaptivecards.BoolProperty
        description: ''
    package: adaptivecards
  - uid: adaptivecards.TextRun.updateLayout
    name: updateLayout(boolean)
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: 'function updateLayout(processChildren?: boolean)'
      parameters:
        - id: processChildren
          type:
            - boolean
          description: ''
          optional: true
    package: adaptivecards
  - uid: adaptivecards.TextRun.validateProperties
    name: validateProperties()
    children: []
    type: method
    langs:
      - typeScript
    summary: ''
    syntax:
      content: function validateProperties()
      parameters: []
      return:
        type:
          - adaptivecards.ValidationResults
        description: ''
    package: adaptivecards
  - uid: adaptivecards.TextRun.weight
    name: weight
    fullName: weight
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'weight: TextWeight'
      return:
        type:
          - adaptivecards.TextWeight
        description: ''
    package: adaptivecards
  - uid: adaptivecards.TextRun.weightProperty
    name: weightProperty
    fullName: weightProperty
    children: []
    langs:
      - typeScript
    type: property
    summary: ''
    syntax:
      content: 'static weightProperty: EnumProperty<TextWeight>'
      return:
        type:
          - adaptivecards.EnumProperty<adaptivecards.TextWeight>
        description: ''
    package: adaptivecards
references:
  - uid: adaptivecards.BaseTextBlock
    name: BaseTextBlock
    spec.typeScript:
      - name: BaseTextBlock
        fullName: BaseTextBlock
        uid: adaptivecards.BaseTextBlock
  - uid: adaptivecards.TextColor
    name: TextColor
    spec.typeScript:
      - name: TextColor
        fullName: TextColor
        uid: adaptivecards.TextColor
  - uid: adaptivecards.FontType
    name: FontType
    spec.typeScript:
      - name: FontType
        fullName: FontType
        uid: adaptivecards.FontType
  - uid: adaptivecards.CardElementHeight
    name: CardElementHeight
    spec.typeScript:
      - name: CardElementHeight
        fullName: CardElementHeight
        uid: adaptivecards.CardElementHeight
  - uid: adaptivecards.HorizontalAlignment
    name: HorizontalAlignment
    spec.typeScript:
      - name: HorizontalAlignment
        fullName: HorizontalAlignment
        uid: adaptivecards.HorizontalAlignment
  - uid: adaptivecards.Version
    name: Version
    spec.typeScript:
      - name: Version
        fullName: Version
        uid: adaptivecards.Version
  - uid: adaptivecards.Action
    name: Action
    spec.typeScript:
      - name: Action
        fullName: Action
        uid: adaptivecards.Action
  - uid: adaptivecards.TextSize
    name: TextSize
    spec.typeScript:
      - name: TextSize
        fullName: TextSize
        uid: adaptivecards.TextSize
  - uid: adaptivecards.Spacing
    name: Spacing
    spec.typeScript:
      - name: Spacing
        fullName: Spacing
        uid: adaptivecards.Spacing
  - uid: adaptivecards.TextWeight
    name: TextWeight
    spec.typeScript:
      - name: TextWeight
        fullName: TextWeight
        uid: adaptivecards.TextWeight
  - uid: adaptivecards.EnumProperty<adaptivecards.TextColor>
    name: TextColor>
    spec.typeScript:
      - name: EnumProperty
        fullName: EnumProperty
        uid: adaptivecards.EnumProperty
      - name: <
        fullName: <
      - name: TextColor
        fullName: TextColor
        uid: adaptivecards.TextColor
      - name: '>'
        fullName: '>'
  - uid: adaptivecards.EnumProperty<adaptivecards.FontType>
    name: FontType>
    spec.typeScript:
      - name: EnumProperty
        fullName: EnumProperty
        uid: adaptivecards.EnumProperty
      - name: <
        fullName: <
      - name: FontType
        fullName: FontType
        uid: adaptivecards.FontType
      - name: '>'
        fullName: '>'
  - uid: adaptivecards.ValueSetProperty
    name: ValueSetProperty
    spec.typeScript:
      - name: ValueSetProperty
        fullName: ValueSetProperty
        uid: adaptivecards.ValueSetProperty
  - uid: adaptivecards.BoolProperty
    name: BoolProperty
    spec.typeScript:
      - name: BoolProperty
        fullName: BoolProperty
        uid: adaptivecards.BoolProperty
  - uid: adaptivecards.EnumProperty<adaptivecards.HorizontalAlignment>
    name: HorizontalAlignment>
    spec.typeScript:
      - name: EnumProperty
        fullName: EnumProperty
        uid: adaptivecards.EnumProperty
      - name: <
        fullName: <
      - name: HorizontalAlignment
        fullName: HorizontalAlignment
        uid: adaptivecards.HorizontalAlignment
      - name: '>'
        fullName: '>'
  - uid: adaptivecards.StringProperty
    name: StringProperty
    spec.typeScript:
      - name: StringProperty
        fullName: StringProperty
        uid: adaptivecards.StringProperty
  - uid: adaptivecards.SerializableObjectProperty
    name: SerializableObjectProperty
    spec.typeScript:
      - name: SerializableObjectProperty
        fullName: SerializableObjectProperty
        uid: adaptivecards.SerializableObjectProperty
  - uid: adaptivecards.ActionProperty
    name: ActionProperty
    spec.typeScript:
      - name: ActionProperty
        fullName: ActionProperty
        uid: adaptivecards.ActionProperty
  - uid: adaptivecards.EnumProperty<adaptivecards.TextSize>
    name: TextSize>
    spec.typeScript:
      - name: EnumProperty
        fullName: EnumProperty
        uid: adaptivecards.EnumProperty
      - name: <
        fullName: <
      - name: TextSize
        fullName: TextSize
        uid: adaptivecards.TextSize
      - name: '>'
        fullName: '>'
  - uid: adaptivecards.EnumProperty<adaptivecards.Spacing>
    name: Spacing>
    spec.typeScript:
      - name: EnumProperty
        fullName: EnumProperty
        uid: adaptivecards.EnumProperty
      - name: <
        fullName: <
      - name: Spacing
        fullName: Spacing
        uid: adaptivecards.Spacing
      - name: '>'
        fullName: '>'
  - uid: adaptivecards.EnumProperty<adaptivecards.TextWeight>
    name: TextWeight>
    spec.typeScript:
      - name: EnumProperty
        fullName: EnumProperty
        uid: adaptivecards.EnumProperty
      - name: <
        fullName: <
      - name: TextWeight
        fullName: TextWeight
        uid: adaptivecards.TextWeight
      - name: '>'
        fullName: '>'
  - uid: adaptivecards.HostConfig
    name: HostConfig
    spec.typeScript:
      - name: HostConfig
        fullName: HostConfig
        uid: adaptivecards.HostConfig
  - uid: adaptivecards.CardElement | undefined
    name: CardElement | undefined
    spec.typeScript:
      - name: CardElement
        fullName: CardElement
        uid: adaptivecards.CardElement
      - name: ' | undefined'
        fullName: ' | undefined'
  - uid: adaptivecards.HostCapabilities
    name: HostCapabilities
    spec.typeScript:
      - name: HostCapabilities
        fullName: HostCapabilities
        uid: adaptivecards.HostCapabilities
  - uid: adaptivecards.Action | undefined
    name: Action | undefined
    spec.typeScript:
      - name: Action
        fullName: Action
        uid: adaptivecards.Action
      - name: ' | undefined'
        fullName: ' | undefined'
  - uid: 'adaptivecards.Input[]'
    name: 'Input[]'
    spec.typeScript:
      - name: Input
        fullName: Input
        uid: adaptivecards.Input
      - name: '[]'
        fullName: '[]'
  - uid: adaptivecards.PaddingDefinition
    name: PaddingDefinition
    spec.typeScript:
      - name: PaddingDefinition
        fullName: PaddingDefinition
        uid: adaptivecards.PaddingDefinition
  - uid: adaptivecards.ContainerStyleDefinition
    name: ContainerStyleDefinition
    spec.typeScript:
      - name: ContainerStyleDefinition
        fullName: ContainerStyleDefinition
        uid: adaptivecards.ContainerStyleDefinition
  - uid: 'adaptivecards.ActionType[]'
    name: 'ActionType[]'
    spec.typeScript:
      - name: ActionType
        fullName: ActionType
        uid: adaptivecards.ActionType
      - name: '[]'
        fullName: '[]'
  - uid: adaptivecards.Container | undefined
    name: Container | undefined
    spec.typeScript:
      - name: Container
        fullName: Container
        uid: adaptivecards.Container
      - name: ' | undefined'
        fullName: ' | undefined'
  - uid: 'adaptivecards.IResourceInformation[]'
    name: 'IResourceInformation[]'
    spec.typeScript:
      - name: IResourceInformation
        fullName: IResourceInformation
        uid: adaptivecards.IResourceInformation
      - name: '[]'
        fullName: '[]'
  - uid: adaptivecards.CardElement
    name: CardElement
    spec.typeScript:
      - name: CardElement
        fullName: CardElement
        uid: adaptivecards.CardElement
  - uid: adaptivecards.CardObject
    name: CardObject
    spec.typeScript:
      - name: CardObject
        fullName: CardObject
        uid: adaptivecards.CardObject
  - uid: adaptivecards.SerializableObjectSchema
    name: SerializableObjectSchema
    spec.typeScript:
      - name: SerializableObjectSchema
        fullName: SerializableObjectSchema
        uid: adaptivecards.SerializableObjectSchema
  - uid: adaptivecards.PropertyDefinition
    name: PropertyDefinition
    spec.typeScript:
      - name: PropertyDefinition
        fullName: PropertyDefinition
        uid: adaptivecards.PropertyDefinition
  - uid: adaptivecards.BaseTextDefinition
    name: BaseTextDefinition
    spec.typeScript:
      - name: BaseTextDefinition
        fullName: BaseTextDefinition
        uid: adaptivecards.BaseTextDefinition
  - uid: adaptivecards.ValidationResults
    name: ValidationResults
    spec.typeScript:
      - name: ValidationResults
        fullName: ValidationResults
        uid: adaptivecards.ValidationResults
  - uid: adaptivecards.SerializationContext
    name: SerializationContext
    spec.typeScript:
      - name: SerializationContext
        fullName: SerializationContext
        uid: adaptivecards.SerializationContext
  - uid: adaptivecards.CardObject | undefined
    name: CardObject | undefined
    spec.typeScript:
      - name: CardObject
        fullName: CardObject
        uid: adaptivecards.CardObject
      - name: ' | undefined'
        fullName: ' | undefined'
  - uid: adaptivecards.BaseSerializationContext
    name: BaseSerializationContext
    spec.typeScript:
      - name: BaseSerializationContext
        fullName: BaseSerializationContext
        uid: adaptivecards.BaseSerializationContext
  - uid: adaptivecards.PropertyBag | undefined
    name: PropertyBag | undefined
    spec.typeScript:
      - name: PropertyBag
        fullName: PropertyBag
        uid: adaptivecards.PropertyBag
      - name: ' | undefined'
        fullName: ' | undefined'
