### YamlMime:UniversalReference
items:
  - uid: adaptivecards-templating.Template
    name: Template
    fullName: Template
    children:
      - adaptivecards-templating.Template.expand
      - adaptivecards-templating.Template.parseInterpolatedString
      - adaptivecards-templating.Template.constructor
      - adaptivecards-templating.Template.tryEvaluateExpression
    langs:
      - typeScript
    type: class
    summary: Represents a template that can be bound to data.
    package: adaptivecards-templating
  - uid: adaptivecards-templating.Template.expand
    name: expand(IEvaluationContext)
    children: []
    type: method
    langs:
      - typeScript
    summary: >
      Expands the template using the provided context. Template expansion
      involves

      evaluating the expressions used in the original template payload, as well
      as

      repeating (expanding) parts of that payload that are bound to arrays.

      Example:


      ```typescript

      let context = {
          $root: {
              firstName: "John",
              lastName: "Doe",
              children: [
                  { fullName: "Jane Doe", age: 9 },
                  { fullName: "Alex Doe", age: 12 }
              ]
          }
      }


      let templatePayload = {
          type: "AdaptiveCard",
          version: "1.2",
          body: [
              {
                  type: "TextBlock",
                  text: "${firstName} ${lastName}"
              },
              {
                  type: "TextBlock",
                  $data: "${children}",
                  text: "${fullName} (${age})"
              }
          ]
      }


      let template = new Template(templatePayload);


      let expandedTemplate = template.expand(context);

      ```


      With the above code, the value of `expandedTemplate` will be


      ```json

      {
          type: "AdaptiveCard",
          version: "1.2",
          body: [
              {
                  type: "TextBlock",
                  text: "John Doe"
              },
              {
                  type: "TextBlock",
                  text: "Jane Doe (9)"
              },
              {
                  type: "TextBlock",
                  text: "Alex Doe (12)"
              }
          ]
      }

      ```
    syntax:
      content: 'function expand(context: IEvaluationContext)'
      parameters:
        - id: context
          type:
            - adaptivecards-templating.IEvaluationContext
          description: The context to bind the template to.
      return:
        type:
          - any
        description: |-
          A value representing the expanded template. The type of that value
            is dependent on the type of the original template payload passed to the constructor.
    package: adaptivecards-templating
  - uid: adaptivecards-templating.Template.parseInterpolatedString
    name: parseInterpolatedString(string)
    children: []
    type: method
    langs:
      - typeScript
    summary: Parses an interpolated string into an Expression object ready to evaluate.
    syntax:
      content: 'static function parseInterpolatedString(interpolatedString: string)'
      parameters:
        - id: interpolatedString
          type:
            - string
          description: 'The interpolated string to parse. Example: "Hello ${name}"'
      return:
        type:
          - Expression | string
        description: >-
          An Expression object if the provided interpolated string contained at
          least one expression (e.g. "${expression}"); the original string
          otherwise.
    package: adaptivecards-templating
  - uid: adaptivecards-templating.Template.constructor
    name: Template(any)
    children: []
    type: constructor
    langs:
      - typeScript
    summary: |-
      Initializes a new Template instance based on the provided payload.
      Once created, the instance can be bound to different data objects
      in a loop.
    syntax:
      content: 'new Template(payload: any)'
      parameters:
        - id: payload
          type:
            - any
          description: |
            The template payload.
    package: adaptivecards-templating
  - uid: adaptivecards-templating.Template.tryEvaluateExpression
    name: 'tryEvaluateExpression(Expression, IEvaluationContext, boolean)'
    children: []
    type: method
    langs:
      - typeScript
    summary: Tries to evaluate the provided expression using the provided context.
    syntax:
      content: >-
        static function tryEvaluateExpression(expression: Expression, context:
        IEvaluationContext, allowSubstitutions: boolean)
      parameters:
        - id: expression
          type:
            - Expression
          description: The expression to evaluate.
        - id: context
          type:
            - adaptivecards-templating.IEvaluationContext
          description: The context (data) used to evaluate the expression.
        - id: allowSubstitutions
          type:
            - boolean
          description: >-
            Indicates if the expression evaluator should substitute undefined
            value with a default
              string or the value returned by the GlobalSettings.getUndefinedFieldValueSubstitutionString callback.
      return:
        type:
          - Object
        description: >-
          An object representing the result of the evaluation. If the evaluation
          succeeded, the value property
            contains the actual evaluation result, and the error property is undefined. If the evaluation fails, the error
            property contains a message detailing the error that occurred.
    package: adaptivecards-templating
references:
  - uid: adaptivecards-templating.IEvaluationContext
    name: IEvaluationContext
    spec.typeScript:
      - name: IEvaluationContext
        fullName: IEvaluationContext
        uid: adaptivecards-templating.IEvaluationContext
