### YamlMime:UniversalReference
items:
  - uid: adaptivecards-templating.GlobalSettings
    name: GlobalSettings
    fullName: GlobalSettings
    children:
      - >-
        adaptivecards-templating.GlobalSettings.getUndefinedFieldValueSubstitutionString
    langs:
      - typeScript
    type: class
    summary: >-
      Holds global settings that can be used to customize the way templates are
      expanded.
    package: adaptivecards-templating
  - uid: >-
      adaptivecards-templating.GlobalSettings.getUndefinedFieldValueSubstitutionString
    name: getUndefinedFieldValueSubstitutionString
    fullName: getUndefinedFieldValueSubstitutionString
    children: []
    langs:
      - typeScript
    type: property
    summary: >
      Callback invoked when expression evaluation needs the value of a field in
      the source data object

      and that field is undefined or null. By default, expression evaluation
      will substitute an undefined

      field with its binding expression (e.g. `${field}`). This callback makes
      it possible to customize that

      behavior.

      **Example**

      Given this data object:


      ```json

      {
          firstName: "David"
      }

      ```


      The expression `${firstName} ${lastName}` will evaluate to "David
      ${lastName}" because the `lastName`

      field is undefined.


      Now let's set the callback:

      ```typescript

      GlobalSettings.getUndefinedFieldValueSubstitutionString = (path: string)
      => { return "<undefined value>"; }

      ```


      With that, the above expression will evaluate to "David &lt;undefined
      value&gt;"
    optional: true
    syntax:
      content: >-
        static getUndefinedFieldValueSubstitutionString?: (path: string) =>
        string | undefined
      return:
        type:
          - '(path: string) => string | undefined'
        description: ''
    package: adaptivecards-templating
